name: Analyze Commits and Send Metrics

on:
  push:
    branches:
      - '**'  # Monitora todas as branches

jobs:
  analyze-and-send-metrics:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Garante que todo o histórico seja clonado

    - name: Get the Diff of Commits
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        # Get the latest commit hash
        COMMIT_HASH=$(git log -1 --pretty=format:"%H")
        echo "Commit Hash: $COMMIT_HASH"

        # Get the username of the committer
        COMMIT_USER=$(git log -1 --pretty=format:"%an")
        echo "Commit User: $COMMIT_USER"

        # Get the committer's email
        COMMIT_EMAIL=$(git log -1 --pretty=format:"%ae")
        echo "Commit Email: $COMMIT_EMAIL"

        # Get the commit message
        COMMIT_MSG=$(git log -1 --pretty=format:"%s")
        echo "Commit Message: $COMMIT_MSG"

        # Get the full commit message
        COMMIT_FULL_MSG=$(git log -1 --pretty=format:"%B")
        echo "Commit Full Message: $COMMIT_FULL_MSG"

        # Get the commit date
        COMMIT_DATE=$(git log -1 --pretty=format:"%ci")
        echo "Commit Date: $COMMIT_DATE"

        # Get the current branch name
        BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
        echo "Branch Name: $BRANCH_NAME"

        # Get the previous commit hash
        PREV_COMMIT_HASH=$(git log -2 --pretty=format:"%H" | tail -n1)
        echo "Previous Commit Hash: $PREV_COMMIT_HASH"

        # Get the number of files changed
        MODIFIED_FILES=$(git diff --name-only HEAD~1 HEAD | wc -l)
        echo "Modified Files: $MODIFIED_FILES"

        # Get the number of lines added and removed
        LINES_ADDED=$(git diff --stat HEAD~1 HEAD | tail -n1 | awk '{print $4}')
        LINES_REMOVED=$(git diff --stat HEAD~1 HEAD | tail -n1 | awk '{print $6}')
        echo "Lines Added: $LINES_ADDED"
        echo "Lines Removed: $LINES_REMOVED"

        # Get the repository name
        REPO_NAME=$(basename -s .git `git config --get remote.origin.url`)
        echo "Repository Name: $REPO_NAME"

        # Get the repository URL
        REPO_URL=$(git config --get remote.origin.url)
        echo "Repository URL: $REPO_URL"

        # Get the commit diff
        COMMIT_DIFF=$(git log -p -1 | sed 's/"/\\"/g' | awk '{printf "%s\\n", $0}' | jq -aRs .)

             # Construir o JSON de forma segura usando jq
          JSON_DATA=$(jq -n --arg commit_diff "$COMMIT_DIFF" '{
              "model": "gpt-4o-mini",
              "messages": [
                  {
                      "role": "user",
                      "content": "Sabendo que voce é um bot que analisa a complexidade de algoritmos desenvolvidos baseado em diff entre commits, Diga quantos pontos de funcao tem nesse dif retornando o seguinte json com a quantidade de pontos de funcao calculado de acordo com a complexidade do que foi desenvolvido na diferenca entre os commits { pontos } sem comentario."
                  },
                  {
                      "role": "user",
                      "content": $commit_diff
                  }
              ],
              "temperature": 0.1
          }')

          # Fazer a requisição cURL
          RESPONSE=$(curl --location 'https://api.openai.com/v1/chat/completions' \
            --header 'Content-Type: application/json' \
            --header "Authorization: Bearer $OPENAI_API_KEY" \
            --data "$JSON_DATA")

          # Print the raw response for debugging
          echo "Response from ChatGPT API: $RESPONSE"

          # Optionally, parse the response
          PARSED_RESPONSE=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          echo "Parsed Response: $PARSED_RESPONSE"

        # Try to extract the points from the response
        POINTS=$PARSED_RESPONSE
        echo "Points Extracted: $POINTS"

        # Create extended JSON body for POST request
        JSON_BODY=$(jq -n \
          --arg user "$COMMIT_USER" \
          --arg email "$COMMIT_EMAIL" \
          --arg desc "$COMMIT_MSG" \
          --arg full_desc "$COMMIT_FULL_MSG" \
          --arg points "$POINTS" \
          --arg date "$COMMIT_DATE" \
          --arg branch "$BRANCH_NAME" \
          --arg prev_commit "$PREV_COMMIT_HASH" \
          --arg files "$MODIFIED_FILES" \
          --arg added "$LINES_ADDED" \
          --arg removed "$LINES_REMOVED" \
          --arg repo_name "$REPO_NAME" \
          --arg repo_url "$REPO_URL" \
          '{username: $user, email: $email, description: $desc, full_description: $full_desc, points: $points, date: $date, branch: $branch, previous_commit: $prev_commit, modified_files: $files, lines_added: $added, lines_removed: $removed, repository_name: $repo_name, repository_url: $repo_url}')

        echo "Extended JSON Body: $JSON_BODY"

        # Send the metrics to the API endpoint
        curl -X POST https://metricas.codigocomcafe.dev.br \
        -H "Content-Type: application/json" \
        -d "$JSON_BODY"
